// <auto-generated />

namespace Bonvivir.WebApi
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Bonvivir.Domain.Helpers;
    using Bonvivir.Application.Offers;
    using Bonvivir.Infraestructure;
    using Bonvivir.Infrastructure.Contracts;
    using Bonvivir.Persistance;
    using Bonvivir.WebApi.HealthChecks;
    using Bonvivir.WebApi.Middlewares;
    using MediatR;
    using Microsoft.AspNetCore.Authentication.JwtBearer;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.AspNetCore.Identity;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.IdentityModel.Tokens;
    using Swashbuckle.AspNetCore.Swagger;
    using Bonvivir.WebApi.Services;
    using Microsoft.Extensions.FileProviders;
    using Microsoft.AspNetCore.Http;

    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json", true)
                .Build();
        }

        public IConfigurationRoot Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);

            services.AddMediatR(typeof(OffersRequest).GetTypeInfo().Assembly);

            services.AddCronJob<RetrySubscriptionCronJob>(c =>
            {
                c.TimeZoneInfo = TimeZoneInfo.Local;
                c.CronExpression = @"0 3 * * *";
                // c.CronExpression = "*/5 * * * *"; // Test QA
            });

            // configure strongly typed settings objects
            var appSettingsSection = Configuration.GetSection("AppSettings");

            services.Configure<AppSettings>(appSettingsSection);

            // configure jwt authentication
            var appSettings = appSettingsSection.Get<AppSettings>();
            var key = Encoding.ASCII.GetBytes(appSettings.Secret);

            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(x =>
            {
                x.RequireHttpsMetadata = false;
                x.SaveToken = true;
                x.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(key),
                    ValidateIssuer = false,
                    ValidateAudience = false,
                    ClockSkew = TimeSpan.FromMinutes(15)
                };
            });

            string connectionString = Environment.GetEnvironmentVariable("CONNECTION_STRING");

            services.AddDbContext<BonvivirDbContext>(options =>
            {
                if (connectionString != null && connectionString != string.Empty)
                {
                    options.UseMySQL(connectionString, (b) => b.MigrationsAssembly("Bonvivir.WebApi"));
                }
                else
                {
                    connectionString = this.Configuration.GetConnectionString("DefaultConnection");

                    if (connectionString != null && connectionString != string.Empty)
                    {
                        options.UseMySQL(connectionString, (b) => b.MigrationsAssembly("Bonvivir.WebApi"));
                    }
                    else
                    {
                        Console.WriteLine("Please Define a Connection String from Environment Variable or App Settings");
                    }
                }
            });

            services.AddDefaultIdentity<IdentityUser>()
            .AddEntityFrameworkStores<BonvivirDbContext>();

            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new Info { Title = "BonVivir API", Version = "v1" });
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                c.IncludeXmlComments(xmlPath);
            });

            services.ConfigureSwaggerGen(options =>
            {
                options.CustomSchemaIds(x => x.FullName);
            });

            services.AddHealthChecks()
                  .AddCheck<SqlServerHealthCheck>("sql");

            services.AddTransient<SqlServerHealthCheck>();

            services.AddCors(options =>
            {
                options.AddPolicy(
                    "AllowAnyOrigin",
                    builder =>
                    {
                        builder
                            .AllowAnyOrigin()
                            .AllowAnyMethod()
                            .AllowAnyHeader()
                            .WithExposedHeaders("Content-Disposition");
                    });
            });

            services.AddHttpClient<IKiwiClient, KiwiClient>()
                .ConfigurePrimaryHttpMessageHandler(c => new HttpClientHandler()
                {
                    ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                });

            services.AddHttpClient<IEncryptClient, EncryptClient>();

            services.AddTransient<IEmailClient, EMailClient>();
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app.UseSwagger();

            app.UseSwaggerUI(c =>
            {
#pragma warning disable S1075 // URIs should not be hardcoded
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "Ven API V1");
#pragma warning restore S1075 // URIs should not be hardcoded
                c.RoutePrefix = "Swagger";
                c.DefaultModelsExpandDepth(-1);
            });

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseDatabaseErrorPage();
            }
            else
            {
                app.UseHsts();
            }

            app.UseCors("AllowAnyOrigin");
            app.Use(async (context, next) =>
            {
                context.Response.OnStarting(() =>
                {
                    context.Response.Headers.Add("Cache-Control", "no-cache, no-store, must-revalidate");
                    return Task.FromResult(0);
                });
                await next();
            });
            app.UseHttpsRedirection();
            app.UseAuthentication();
            app.UseMvc();
            app.UseMiddleware<RequestResponseLoggingMiddleware>();
#pragma warning disable S1075 // URIs should not be hardcoded
            app.UseHealthChecks("/hc");
#pragma warning restore S1075 // URIs should not be hardcoded

            app.UseStaticFiles(new StaticFileOptions()
            {
                FileProvider = new PhysicalFileProvider(
                Path.Combine(Directory.GetCurrentDirectory(), @"template")),
                RequestPath = new PathString("/template")
            });
        }
    }
}
